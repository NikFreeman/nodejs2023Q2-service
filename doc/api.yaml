openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UsersController_create
      summary: Create user
      description: Creates a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Users
    get:
      operationId: UsersController_findAll
      summary: Gets all users
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - Users
  /user/{id}:
    get:
      operationId: UsersController_findOne
      summary: Get single user by id
      description: Get single user by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '404':
          description: User not found
      tags:
        - Users
    put:
      operationId: UsersController_update
      summary: Update a user's password
      description: Updates a user's password by ID
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: '"User"'
                example:
                  id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  login: Test user
                  version: '2'
                  createdAt: '1655000000'
                  updateAt: '2346770000'
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: Test user
                  version:
                    type: number
                    example: '2'
                  createdAt:
                    type: number
                    example: '1655000000'
                  updateAt:
                    type: number
                    example: '2346770000'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '403':
          description: oldPassword is wrong
        '404':
          description: User not found
      tags:
        - Users
    delete:
      operationId: UsersController_remove
      summary: Delete user
      description: Deletes user by ID.
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      responses:
        '204':
          description: The user has been deleted
        '400':
          description: Bad request. userId is invalid (not uuid)
        '404':
          description: User not found
      tags:
        - Users
  /album:
    post:
      operationId: AlbumsController_create
      summary: Create album
      description: Creates a new album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Albums
    get:
      operationId: AlbumsController_findAll
      summary: Get albums list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags:
        - Albums
  /album/{id}:
    get:
      operationId: AlbumsController_findOne
      summary: Get single album by id
      description: Gets single album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Albums
    put:
      operationId: AlbumsController_update
      summary: Update album information
      description: Update library album information by UUID
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: '"Album"'
                example:
                  id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  name: Test Album
                  year: 1991
                  artistId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Test album
                  year:
                    type: number
                    example: '1991'
                  ArtistId:
                    type: string
                    format: uuid
                    nullable: true
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Albums
    delete:
      operationId: AlbumsController_remove
      summary: Delete album
      description: Deletes album by ID.
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            type: string
      responses:
        '204':
          description: The artist has been deleted
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '404':
          description: Album not found
      tags:
        - Albums
  /artist:
    post:
      operationId: ArtistsController_create
      summary: Add new artist
      description: Add new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Artists
    get:
      operationId: ArtistsController_findAll
      summary: Gets all artists
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags:
        - Artists
  /artist/{id}:
    get:
      operationId: ArtistsController_findOne
      summary: Get single artist by id
      description: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist not found
      tags:
        - Artists
    put:
      operationId: ArtistsController_update
      summary: Update artist information
      description: Update artist information by UUID
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: '"Artist"'
                example:
                  id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  name: Test Artist
                  grammy: true
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Test artist
                  grammy:
                    type: boolean
                    example: 'false'
        '400':
          description: Bad request. ArtistId is invalid (not uuid)
        '404':
          description: Artist not found
      tags:
        - Artists
    delete:
      operationId: ArtistsController_remove
      summary: Delete artist
      description: Deletes artist by ID.
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            type: string
      responses:
        '204':
          description: The artist has been deleted
        '400':
          description: Bad request. ArtistId is invalid (not uuid)
        '404':
          description: Artist not found
      tags:
        - Artists
  /track:
    post:
      operationId: TracksController_create
      summary: Create track
      description: Creates a new track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Tracks
    get:
      operationId: TracksController_findAll
      summary: Get tracks list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - Tracks
  /track/{id}:
    get:
      operationId: TracksController_findOne
      summary: Get single track by id
      description: Gets single track by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Tracks
    put:
      operationId: TracksController_update
      summary: Update track information
      description: Update library track information by UUID
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: '"Track"'
                example:
                  id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  name: Test track
                  albumId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  artistId: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  duration: 234
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Test track
                  ArtistId:
                    type: string
                    format: uuid
                    nullable: true
                  AlbumId:
                    type: string
                    format: uuid
                    nullable: true
                  duration:
                    type: number
                    nullable: true
        '400':
          description: Bad request. TrackId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - Tracks
    delete:
      operationId: TracksController_remove
      summary: Delete track
      description: Deletes track by ID.
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            type: string
      responses:
        '204':
          description: The track has been deleted
        '400':
          description: Bad request. TrackId is invalid (not uuid)
        '404':
          description: Track not found
      tags:
        - Tracks
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: Get favorites list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  artists:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artist'
                  albums:
                    type: array
                    items:
                      $ref: '#/components/schemas/Album'
                  tracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'
      tags:
        - Favorites
  /favs/{entity}/{id}:
    post:
      operationId: FavoritesController_Add
      summary: add album/artist/track to favorite
      parameters:
        - name: entity
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request. Id is invalid (not uuid)
        '422':
          description: Not found
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_remove
      summary: delete album/artist/track from favorite
      parameters:
        - name: entity
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request. Id is invalid (not uuid)
        '422':
          description: Not found
      tags:
        - Favorites
info:
  title: Home Library Service
  description: Home music library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: The User`s login
          nullable: false
        password:
          type: string
          description: The User`s password
          nullable: false
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          description: User identifier
          format: uuid
        login:
          type: string
          description: User login
          example: Test user
        version:
          type: number
          description: User version
          example: '1'
        createdAt:
          type: number
          description: Timestamp create User account
          example: '1655000000'
        updatedAt:
          type: number
          description: Timestamp update User account
          example: '1655000000'
      required:
        - id
        - login
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The User`s old password
          nullable: false
        newPassword:
          type: string
          description: The User`s new password
          nullable: false
      required:
        - oldPassword
        - newPassword
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: The Album name
          nullable: false
        year:
          type: number
          description: The Album year
          nullable: false
        artistId:
          type: string
          nullable: true
          description: The Artist`s id
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
          description: Album identifier
          format: uuid
        name:
          type: string
          description: Name album
          example: Innuendo
        year:
          type: number
          description: Year album
          example: '1991'
        artistId:
          type: string
          nullable: true
          description: Artist identifier
          format: uuid
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: The Album name
          nullable: false
        year:
          type: number
          description: The Album year
          nullable: false
        artistId:
          type: string
          nullable: true
          description: The Artist`s id
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: name
          nullable: false
        grammy:
          type: boolean
          description: grammy
          nullable: false
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          description: Artist identifier
          format: uuid
        name:
          type: string
          description: Artist name
          example: Test user
        grammy:
          type: boolean
          description: Grammy
          example: 'false'
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: name
          nullable: false
        grammy:
          type: boolean
          description: grammy
          nullable: false
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: The Track name
          nullable: false
        artistId:
          type: string
          nullable: true
          description: The Artist`s id
        albumId:
          type: string
          nullable: true
          description: The Album id
        duration:
          type: number
          description: The track duration
          nullable: false
      required:
        - name
        - artistId
        - albumId
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
          description: Track identifier
          format: uuid
        name:
          type: string
          description: Name track
          example: Innuendo
        artistId:
          type: string
          nullable: true
          description: Artist identifier
          format: uuid
        albumId:
          type: string
          nullable: true
          description: Album identifier
          format: uuid
        duration:
          type: number
          description: The track duration
          format: number
          nullable: true
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: The Track name
          nullable: false
        artistId:
          type: string
          nullable: true
          description: The Artist`s id
        albumId:
          type: string
          nullable: true
          description: The Album id
        duration:
          type: number
          description: The track duration
          nullable: false
